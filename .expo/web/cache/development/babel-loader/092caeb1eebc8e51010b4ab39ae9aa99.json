{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"active\", \"activityState\", \"style\", \"enabled\"];\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nexport * from \"./types\";\nexport { default as useTransitionProgress } from \"./useTransitionProgress\";\nexport { isSearchBarAvailableForCurrentPlatform, executeNativeBackPress } from \"./utils\";\nvar ENABLE_SCREENS = true;\nexport function enableScreens() {\n  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n}\nexport function enableFreeze() {\n  var shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n}\nexport var NativeScreen = function (_React$Component) {\n  _inherits(NativeScreen, _React$Component);\n  var _super = _createSuper(NativeScreen);\n  function NativeScreen() {\n    _classCallCheck(this, NativeScreen);\n    return _super.apply(this, arguments);\n  }\n  _createClass(NativeScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        active = _this$props.active,\n        activityState = _this$props.activityState,\n        style = _this$props.style,\n        _this$props$enabled = _this$props.enabled,\n        enabled = _this$props$enabled === void 0 ? ENABLE_SCREENS : _this$props$enabled,\n        rest = _objectWithoutProperties(_this$props, _excluded);\n      if (enabled) {\n        if (active !== undefined && activityState === undefined) {\n          activityState = active !== 0 ? 2 : 0;\n        }\n        return React.createElement(View, _extends({\n          hidden: activityState === 0,\n          style: [style, {\n            display: activityState !== 0 ? 'flex' : 'none'\n          }]\n        }, rest));\n      }\n      return React.createElement(View, rest);\n    }\n  }]);\n  return NativeScreen;\n}(React.Component);\nexport var Screen = Animated.createAnimatedComponent(NativeScreen);\nexport var InnerScreen = View;\nexport var ScreenContext = React.createContext(Screen);\nexport var ScreenContainer = View;\nexport var NativeScreenContainer = View;\nexport var NativeScreenNavigationContainer = View;\nexport var ScreenStack = View;\nexport var FullWindowOverlay = View;\nexport var ScreenStackHeaderBackButtonImage = function ScreenStackHeaderBackButtonImage(props) {\n  return React.createElement(View, null, React.createElement(Image, _extends({\n    resizeMode: \"center\",\n    fadeDuration: 0\n  }, props)));\n};\nexport var ScreenStackHeaderRightView = function ScreenStackHeaderRightView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderLeftView = function ScreenStackHeaderLeftView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderCenterView = function ScreenStackHeaderCenterView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderSearchBarView = function ScreenStackHeaderSearchBarView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderConfig = View;\nexport var SearchBar = View;\nexport var ScreenStackHeaderSubview = View;\nexport var shouldUseActivityState = true;","map":{"version":3,"sources":["index.tsx"],"names":["React","default","useTransitionProgress","isSearchBarAvailableForCurrentPlatform","executeNativeBackPress","ENABLE_SCREENS","enableScreens","shouldEnableScreens","screensEnabled","enableFreeze","shouldEnableReactFreeze","NativeScreen","Component","render","active","activityState","style","enabled","rest","props","undefined","display","Screen","Animated","createAnimatedComponent","InnerScreen","View","ScreenContext","createContext","ScreenContainer","NativeScreenContainer","NativeScreenNavigationContainer","ScreenStack","FullWindowOverlay","ScreenStackHeaderBackButtonImage","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenStackHeaderConfig","SearchBar","ScreenStackHeaderSubview","shouldUseActivityState"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n  SearchBarProps,\n} from './types';\n\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function enableFreeze(shouldEnableReactFreeze = true): void {\n  // noop\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n      return (\n        <View\n          // @ts-expect-error: hidden exists on web, but not in React Native\n          hidden={activityState === 0}\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          {...rest}\n        />\n      );\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const InnerScreen = View;\n\nexport const ScreenContext = React.createContext(Screen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> =\n  View;\n\nexport const NativeScreenNavigationContainer: React.ComponentType<ScreenContainerProps> =\n  View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const FullWindowOverlay = View as React.ComponentType<{\n  children: ReactNode;\n}>;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> =\n  View;\n\n// @ts-expect-error: search bar props have no common props with View\nexport const SearchBar: React.ComponentType<SearchBarProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<\n  React.PropsWithChildren<ViewProps & { type?: HeaderSubviewTypes }>\n> = View;\n\nexport const shouldUseActivityState = true;\n"]},"metadata":{},"sourceType":"module"}